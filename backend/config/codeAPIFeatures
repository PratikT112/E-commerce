class APIFeatures {
  constructor(query, queryString) {
    this.query = query; // Mongoose query
    this.queryString = queryString; // Express req.query
  }

  // 1. Full-text search on a specified field
  search(searchableFields = []) {
    if (this.queryString.search) {
      const searchQuery = {
        $or: searchableFields.map((field) => ({
          [field]: { $regex: this.queryString.search, $options: "i" },
        })),
      };
      this.query = this.query.find(searchQuery);
    }
    return this;
  }

  // 2. Filter query (supports greater/less than, etc.)
  filter() {
    const queryObj = { ...this.queryString };
    const excludedFields = ["page", "sort", "limit", "fields", "search"];
    excludedFields.forEach((el) => delete queryObj[el]);

    let queryStr = JSON.stringify(queryObj);
    queryStr = queryStr.replace(/\b(gte|gt|lte|lt)\b/g, (match) => `$${match}`);
    this.query = this.query.find(JSON.parse(queryStr));
    return this;
  }

  // 3. Sorting
  sort(defaultSort = "-createdAt") {
    if (this.queryString.sort) {
      const sortBy = this.queryString.sort.split(",").join(" ");
      this.query = this.query.sort(sortBy);
    } else {
      this.query = this.query.sort(defaultSort);
    }
    return this;
  }

  // 4. Field Selection (Projection)
  limitFields() {
    if (this.queryString.fields) {
      const fields = this.queryString.fields.split(",").join(" ");
      this.query = this.query.select(fields);
    } else {
      this.query = this.query.select("-__v"); // Exclude internal fields
    }
    return this;
  }

  // 5. Pagination
  paginate(defaultLimit = 10) {
    const page = this.queryString.page * 1 || 1;
    const limit = this.queryString.limit * 1 || defaultLimit;
    const skip = (page - 1) * limit;

    this.query = this.query.skip(skip).limit(limit);
    return this;
  }
}

// Usage in a Controller Example
const getItems = async (req, res) => {
  try {
    const features = new APIFeatures(Model.find(), req.query)
      .search(["name", "description"])
      .filter()
      .sort()
      .limitFields()
      .paginate();

    const data = await features.query;
    res.status(200).json({ success: true, count: data.length, data });
  } catch (error) {
    res.status(500).json({ success: false, message: error.message });
  }
};

module.exports = APIFeatures;
